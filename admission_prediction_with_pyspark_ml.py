# -*- coding: utf-8 -*-
"""Admission_prediction_with_pyspark_ml.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pIewZpcKEHu8Lrat8qzMRYcwIr9ovwj9

# TASK 1 : Install Dependencies & Run a SparkSession
"""

#install pyspark
! pip install pyspark

#create a sparksession
from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("spark").getOrCreate()

"""# TASK 2 : Clone & Explore dataset"""

#clone the dataset
! git clone https://github.com/education454/admission_dataset

#check the presence of dataset
! ls admission_dataset/

#create a spark dataframe
df = spark.read.csv('/content/admission_dataset/Admission_Predict_Ver1.1.csv',header=True,inferSchema=True)

#display dataframe
df.show()

#get the no.of rows & columns
print(df.count(), len(df.columns))

#print schema
df.printSchema()

#get the summary statistics
df.describe().show()

"""# TASK 3 : Data Cleaning"""

#drop the unnecessary column
df = df.drop('Serial No')

#display the dataframe
df.show()

#check for null values
for i in df.columns:
  print(i+":",df[df[i].isNull()].count())

"""# TASK 4 : Correlation Analysis & Feature Selection"""

# correlation analysis
for col in df.columns:
  print('Correlation to chance of admit col for {} is {}'.format(col,df.stat.corr('Chance of Admit',col)))

# feature selection
from pyspark.ml.feature import VectorAssembler
assembler = VectorAssembler(inputCols=['GRE Score','TOEFL Score','CGPA'],outputCol='features')

#display dataframe
output_data = assembler.transform(df)
output_data.show()

"""# TASK 5 : Build the Linear Regression Model"""

#import Linearregression and create final data
from pyspark.ml.regression import LinearRegression
final_data = output_data.select('features', 'Chance of admit')

#print schema of final data
final_data.printSchema()

#split the dataset into training and testing set
train, test = final_data.randomSplit([0.7,0.3])

#build & train the model
models = LinearRegression(featuresCol='features',labelCol='Chance of admit')
model = models.fit(train)

#get coefficients & intercept
print("coefficients: ", model.coefficients)
print("intercept: ", model.intercept)

#get summary of the model
summary = model.summary

#print the rmse & r2 score
print('RMSE',summary.rootMeanSquaredError)
print('r2 score', summary.r2)

"""# TASK 6 : Evaluate & Save the Model"""

#transform on the test data
predictions = model.transform(test)

#display the predictions
predictions.show(20)

#evaluate the model
from pyspark.ml.evaluation import RegressionEvaluator
evaluator = RegressionEvaluator(predictionCol='prediction',labelCol='Chance of admit', metricName='r2')
print('r2 on the test data', evaluator.evaluate(predictions))

#save the model
model.save('model')

#load the model
from pyspark.ml.regression import LinearRegressionModel
model = LinearRegressionModel.load('model')